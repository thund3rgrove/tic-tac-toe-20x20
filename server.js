const express = require('express');
const { createServer } = require('node:http');
const { join } = require('path');
const { Server } = require('socket.io');
const crypto = require('crypto'); // –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤

const app = express();
const server = createServer(app);
const io = new Server(server);

// var fs = require('fs');

// const CONSTRAINTS = JSON.parse(fs.readFileSync('constraints.json', 'utf8'));
// CONSTRAINTS.BOARD_SIZE = parseInt(CONSTRAINTS.BOARD_SIZE)
const CONSTRAINTS = require('./config.js')

// –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É public –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
app.use(express.static(join(__dirname, 'public')));

app.get('/api/constraints', (req, res) => {
    res.json(CONSTRAINTS);
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–æ–º–Ω–∞—Ç—ã
app.get('/', (req, res) => {
    res.sendFile(join(__dirname, 'views', 'index.html'));
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–º–Ω–∞—Ç—ã
app.get('/room/:roomId', (req, res) => {
    res.sendFile(join(__dirname, 'views', 'room.html'));
});

// –õ–æ–±–±–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–Ω–∞—Ç –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
const lobby = {};
// const possibleElements = ['X', 'Y', 'Z'];
// const possibleElements = ['ü•∫', 'ü§°']

// –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
io.on('connection', (socket) => {
    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è');

    // –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    socket.on('createRoom', () => {
        const roomId = crypto.randomUUID();
        lobby[roomId] = {
            // game: Array.from({ length: 20 }, () => Array(20).fill('_')),
            game: Array.from({ length: CONSTRAINTS.BOARD_SIZE }, () => Array(CONSTRAINTS.BOARD_SIZE).fill('_')),
            players: [],
            currentTurn: 0 // –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫
        };
        socket.join(roomId);
        socket.emit('roomCreated', roomId);
    });

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–º–Ω–∞—Ç–µ —Å –∏–º–µ–Ω–µ–º
    socket.on('joinRoom', ({ roomId, username }) => {
        if (!lobby[roomId]) {
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }
    
        const existingPlayer = lobby[roomId].players.find(player => player.username === username);
    
        if (existingPlayer) {
            existingPlayer.id = socket.id;
            existingPlayer.isConnected = true; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            socket.join(roomId);
            socket.emit('roomJoined', { roomId, player: existingPlayer });
        } else {
            const playerNumber = lobby[roomId].players.length;
            if (playerNumber >= 3) {
                socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
                return;
            }
    
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID —Å–æ–∫–µ—Ç–∞
            const newPlayer = { id: socket.id, username, number: playerNumber, isConnected: true };
            lobby[roomId].players.push(newPlayer);
            socket.join(roomId);
            socket.emit('roomJoined', { roomId, player: newPlayer });
            io.to(roomId).emit('message', `${username} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ`);
        }
    
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä–æ–∫–æ–≤ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ
        io.to(roomId).emit('updatePlayers', lobby[roomId].players);
        io.to(roomId).emit('updateCurrentTurn', lobby[roomId].currentTurn);
        socket.emit('updateBoard', lobby[roomId].game);
    });
    
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–æ–¥–∞
    socket.on('makeMove', ({ roomId, row, col }) => {
        console.log('handling some move')
        const room = lobby[roomId]

        if (!room) {
            console.log('no room found')
            socket.emit('error', '–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        const game = room.game; // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–≥—Ä—ã –≤ –∫–æ–º–Ω–∞—Ç–µ

        // console.log(game)
        if (game && game[row][col] === '_') {
            console.log('clicked in empty spot')
            // const currentTurn = (game.flat().filter(cell => cell !== '_').length) % 2; // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞
            const currentTurn = room.currentTurn;
            
            const playerNumber = room.players.find(player => player.id === socket.id)?.number; // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –∏–≥—Ä–æ–∫–∞
            if (currentTurn !== playerNumber) {
                socket.emit('error', '–≠—Ç–æ –Ω–µ –≤–∞—à —Ö–æ–¥');
                return;
            }

            const symbol = CONSTRAINTS.PLAYER_PAWNS[currentTurn];
            
            console.log('currently playing', currentTurn, symbol)

            game[row][col] = symbol; // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã

            io.to(roomId).emit('updateBoard', game); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ—Å–∫–∏ –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–±–µ–¥—É
            if (checkWin(game, row, col)) {
                io.to(roomId).emit('gameOver', currentTurn);
            } else {
                // room.currentTurn = (currentTurn + 1) % room.players.length; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
                room.currentTurn = (currentTurn + 1) % CONSTRAINTS.MAX_PLAYERS; // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∏–≥—Ä–æ–∫—É
                io.to(roomId).emit('updateCurrentTurn', room.currentTurn);
            }
        }
    });

    function checkWin(board, row, col) {
        return (
            checkDirection(board, row, col, 0, 1, CONSTRAINTS.LINE_LENGTH_TO_WIN) ||   // –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å
            checkDirection(board, row, col, 1, 0, CONSTRAINTS.LINE_LENGTH_TO_WIN) ||   // –≤–µ—Ä—Ç–∏–∫–∞–ª—å
            checkDirection(board, row, col, 1, 1, CONSTRAINTS.LINE_LENGTH_TO_WIN) ||   // –¥–∏–∞–≥–æ–Ω–∞–ª—å —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ
            checkDirection(board, row, col, 1, -1, CONSTRAINTS.LINE_LENGTH_TO_WIN)     // –¥–∏–∞–≥–æ–Ω–∞–ª—å —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ
        );
    }

    function checkDirection(board, row, col, rowDir, colDir, length) {
        const symbol = board[row][col];
        if (symbol === '_') return false;
    
        for (let offset = -length + 1; offset <= 0; offset++) {
            let match = true;
            for (let i = 0; i < length; i++) {
                let r = row + (offset + i) * rowDir;
                let c = col + (offset + i) * colDir;
                if (r < 0 || r >= CONSTRAINTS.BOARD_SIZE || c < 0 || c >= CONSTRAINTS.BOARD_SIZE || board[r][c] !== symbol) {
                    match = false;
                    break;
                }
            }
            if (match) return true;
        }
        return false;
    }


    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    socket.on('disconnect', () => {
        for (const roomId in lobby) {
            const room = lobby[roomId];
            const player = room.players.find(player => player.id === socket.id);
            
            if (player) {
                player.isConnected = false; // –ü–æ–º–µ—á–∞–µ–º –∏–≥—Ä–æ–∫–∞ –∫–∞–∫ –æ—Ç–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ
                io.to(roomId).emit('message', `${player.username} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`);
                io.to(roomId).emit('updatePlayers', room.players);
                break;
            }
        }
    });
});



// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
server.listen(6273, () => {
    console.log('–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:6273');
});
